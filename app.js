// Dabgar Samaj Community App - Complete Multilingual Implementation

// Application State and Data
const SamajApp = {
  currentUser: null,
  isAdmin: false,
  currentView: 'home',
  currentDate: new Date(),
  selectedDate: null,
  currentLanguage: 'en',

  // Comprehensive translations for all languages
  translations: {
    en: {
      // Navigation & Headers
      app_title: "ЁЯО╡ Dabgar Samaj Community",
      app_title_short: "ЁЯО╡ Dabgar Samaj",
      login: "Login",
      register: "Register",
      logout: "Logout",
      nav_home: "Home",
      nav_directory: "Directory",
      nav_family: "Family",
      nav_calendar: "Calendar",
      nav_matrimony: "Matrimony",
      nav_jobs: "Jobs",
      nav_emergency: "Emergency",
      nav_admin: "Admin",
      nav_help: "Help",

      // Hero Section
      hero_title: "Stay United, Stay Connected",
      hero_subtitle: "Unified Digital Platform for Dabgar Samaj",
      hero_description: "Connect with your community, preserve traditions, and build stronger bonds across cities and generations.",
      stats_families: "Families",
      stats_members: "Members", 
      stats_states: "States",
      join_community: "Join Our Community",

      // Features
      app_features: "App Features",
      feature_family_title: "Family Profiles",
      feature_family_desc: "Complete family registration with member profiles and relationship mapping",
      feature_feed_title: "Community Feed",
      feature_feed_desc: "Stay connected with community updates, celebrations, and announcements",
      feature_events_title: "Events Calendar",
      feature_events_desc: "Never miss community gatherings, weddings, and cultural celebrations",
      feature_matrimony_title: "Matrimony",
      feature_matrimony_desc: "Find suitable matches within our community with privacy controls",
      feature_jobs_title: "Jobs & Business",
      feature_jobs_desc: "Discover job opportunities and promote businesses within the community",
      feature_blood_title: "Blood Donation",
      feature_blood_desc: "Emergency help network and blood donor directory for quick assistance",

      // Forms & Labels
      login_title: "Login to Your Account",
      mobile_number: "Mobile Number",
      enter_mobile: "Enter your registered mobile number",
      otp: "OTP",
      enter_otp: "Enter OTP",
      send_otp: "Send OTP",
      verify_login: "Verify & Login",
      register_family: "Register Your Family",
      family_head_name: "Family Head Name",
      enter_family_head_name: "Enter family head name",
      city: "City",
      select_city: "Select City",
      
      // Admin
      admin_access: "Admin Access",
      enter_admin_password: "Enter Admin Password",
      enter_password: "Enter password",
      access_admin_panel: "Access Admin Panel",

      // Family Registration
      register_new_family: "Register New Family",
      family_surname: "Family Surname",
      enter_family_surname: "Enter family surname",
      enter_city: "Enter city",
      family_members: "Family Members (comma separated)",
      enter_family_members: "Enter family member names separated by commas",

      // Emergency
      emergency_sos_request: "Emergency SOS Request",
      emergency_type: "Emergency Type",
      select_emergency_type: "Select Emergency Type",
      medical_emergency: "Medical Emergency",
      blood_needed: "Blood Urgently Needed",
      accident: "Accident",
      fire_emergency: "Fire Emergency",
      other: "Other",
      emergency_message: "Emergency Message",
      describe_emergency: "Describe the emergency situation",
      location: "Location",
      enter_location: "Enter location",
      contact_number: "Contact Number",
      enter_contact_number: "Enter contact number",
      send_emergency_alert: "Send Emergency Alert",

      // Events
      create_new_event: "Create New Event",
      event_title: "Event Title",
      enter_event_title: "Enter event title",
      event_date: "Event Date",
      enter_event_location: "Enter event location",
      description: "Description",
      enter_event_description: "Enter event description",
      create_event: "Create Event",

      // Actions & Others
      view_profile: "View Profile",
      edit: "Edit",
      delete: "Delete",
      save: "Save",
      cancel: "Cancel",
      submit: "Submit",
      search: "Search",
      filter: "Filter",
      apply: "Apply",
      express_interest: "Express Interest",
      share_post: "Share with Community",
      like: "Like",
      comment: "Comment",
      share: "Share",
      age: "Age",
      profession: "Profession",
      education: "Education"
    },

    hi: {
      // Navigation & Headers
      app_title: "ЁЯО╡ рдбрдмрдЧрд░ рд╕рдорд╛рдЬ рд╕рдореБрджрд╛рдп",
      app_title_short: "ЁЯО╡ рдбрдмрдЧрд░ рд╕рдорд╛рдЬ",
      login: "рд▓реЙрдЧрд┐рди",
      register: "рдкрдВрдЬреАрдХрд░рдг",
      logout: "рд▓реЙрдЧрдЖрдЙрдЯ",
      nav_home: "рд╣реЛрдо",
      nav_directory: "рдирд┐рд░реНрджреЗрд╢рд┐рдХрд╛",
      nav_family: "рдкрд░рд┐рд╡рд╛рд░",
      nav_calendar: "рдХреИрд▓реЗрдВрдбрд░",
      nav_matrimony: "рд╡рд┐рд╡рд╛рд╣",
      nav_jobs: "рдиреМрдХрд░реА",
      nav_emergency: "рдЖрдкрд╛рддрдХрд╛рд▓",
      nav_admin: "рдПрдбрдорд┐рди",
      nav_help: "рд╕рд╣рд╛рдпрддрд╛",

      // Hero Section
      hero_title: "рдПрдХрдЬреБрдЯ рд░рд╣реЗрдВ, рдЬреБрдбрд╝реЗ рд░рд╣реЗрдВ",
      hero_subtitle: "рдбрдмрдЧрд░ рд╕рдорд╛рдЬ рдХреЗ рд▓рд┐рдП рдПрдХреАрдХреГрдд рдбрд┐рдЬрд┐рдЯрд▓ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо",
      hero_description: "рдЕрдкрдиреЗ рд╕рдореБрджрд╛рдп рд╕реЗ рдЬреБрдбрд╝реЗрдВ, рдкрд░рдВрдкрд░рд╛рдУрдВ рдХреЛ рд╕рдВрд░рдХреНрд╖рд┐рдд рдХрд░реЗрдВ, рдФрд░ рд╢рд╣рд░реЛрдВ рдФрд░ рдкреАрдврд╝рд┐рдпреЛрдВ рдореЗрдВ рдордЬрдмреВрдд рдмрдВрдзрди рдмрдирд╛рдПрдВред",
      stats_families: "рдкрд░рд┐рд╡рд╛рд░",
      stats_members: "рд╕рджрд╕реНрдп",
      stats_states: "рд░рд╛рдЬреНрдп",
      join_community: "рд╣рдорд╛рд░реЗ рд╕рдореБрджрд╛рдп рд╕реЗ рдЬреБрдбрд╝реЗрдВ",

      // Features
      app_features: "рдРрдк рд╕реБрд╡рд┐рдзрд╛рдПрдВ",
      feature_family_title: "рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рдкреНрд░реЛрдлрд╛рдЗрд▓",
      feature_family_desc: "рд╕рджрд╕реНрдп рдкреНрд░реЛрдлрд╛рдЗрд▓ рдФрд░ рд░рд┐рд╢реНрддреЗ рдХреА рдореИрдкрд┐рдВрдЧ рдХреЗ рд╕рд╛рде рдкреВрд░реНрдг рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рдкрдВрдЬреАрдХрд░рдг",
      feature_feed_title: "рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рдлреАрдб",
      feature_feed_desc: "рд╕рдореБрджрд╛рдп рдХреЗ рдЕрдкрдбреЗрдЯ, рд╕рдорд╛рд░реЛрд╣ рдФрд░ рдШреЛрд╖рдгрд╛рдУрдВ рд╕реЗ рдЬреБрдбрд╝реЗ рд░рд╣реЗрдВ",
      feature_events_title: "рдХрд╛рд░реНрдпрдХреНрд░рдо рдХреИрд▓реЗрдВрдбрд░",
      feature_events_desc: "рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕рднрд╛рдУрдВ, рд╢рд╛рджреА-рд╡рд┐рд╡рд╛рд╣ рдФрд░ рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд╕рдорд╛рд░реЛрд╣реЛрдВ рдХреЛ рди рдЪреВрдХреЗрдВ",
      feature_matrimony_title: "рд╡рд┐рд╡рд╛рд╣",
      feature_matrimony_desc: "рдЧреЛрдкрдиреАрдпрддрд╛ рдирд┐рдпрдВрддреНрд░рдг рдХреЗ рд╕рд╛рде рд╣рдорд╛рд░реЗ рд╕рдореБрджрд╛рдп рдореЗрдВ рдЙрдкрдпреБрдХреНрдд рдореИрдЪ рдЦреЛрдЬреЗрдВ",
      feature_jobs_title: "рдиреМрдХрд░реА рдФрд░ рд╡реНрдпрд╛рдкрд╛рд░",
      feature_jobs_desc: "рд╕рдореБрджрд╛рдп рдХреЗ рднреАрддрд░ рдиреМрдХрд░реА рдХреЗ рдЕрд╡рд╕рд░ рдЦреЛрдЬреЗрдВ рдФрд░ рд╡реНрдпрд╛рдкрд╛рд░ рдХреЛ рдмрдврд╝рд╛рд╡рд╛ рджреЗрдВ",
      feature_blood_title: "рд░рдХреНрддрджрд╛рди",
      feature_blood_desc: "рддреНрд╡рд░рд┐рдд рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛ рдиреЗрдЯрд╡рд░реНрдХ рдФрд░ рд░рдХреНрддрджрд╛рддрд╛ рдирд┐рд░реНрджреЗрд╢рд┐рдХрд╛",

      // Forms & Labels
      login_title: "рдЕрдкрдиреЗ рдЦрд╛рддреЗ рдореЗрдВ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ",
      mobile_number: "рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░",
      enter_mobile: "рдЕрдкрдирд╛ рдкрдВрдЬреАрдХреГрдд рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ",
      otp: "рдУрдЯреАрдкреА",
      enter_otp: "рдУрдЯреАрдкреА рджрд░реНрдЬ рдХрд░реЗрдВ",
      send_otp: "рдУрдЯреАрдкреА рднреЗрдЬреЗрдВ",
      verify_login: "рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ рдФрд░ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ",
      register_family: "рдЕрдкрдиреЗ рдкрд░рд┐рд╡рд╛рд░ рдХрд╛ рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ",
      family_head_name: "рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рдореБрдЦрд┐рдпрд╛ рдХрд╛ рдирд╛рдо",
      enter_family_head_name: "рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рдореБрдЦрд┐рдпрд╛ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ",
      city: "рд╢рд╣рд░",
      select_city: "рд╢рд╣рд░ рдЪреБрдиреЗрдВ",

      // Admin
      admin_access: "рдПрдбрдорд┐рди рдкрд╣реБрдВрдЪ",
      enter_admin_password: "рдПрдбрдорд┐рди рдкрд╛рд╕рд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ",
      enter_password: "рдкрд╛рд╕рд╡рд░реНрдб рджрд░реНрдЬ рдХрд░реЗрдВ",
      access_admin_panel: "рдПрдбрдорд┐рди рдкреИрдирд▓ рддрдХ рдкрд╣реБрдВрдЪ",

      // Family Registration
      register_new_family: "рдирдпрд╛ рдкрд░рд┐рд╡рд╛рд░ рдкрдВрдЬреАрдХреГрдд рдХрд░реЗрдВ",
      family_surname: "рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рдЙрдкрдирд╛рдо",
      enter_family_surname: "рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рдЙрдкрдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ",
      enter_city: "рд╢рд╣рд░ рджрд░реНрдЬ рдХрд░реЗрдВ",
      family_members: "рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд╕рджрд╕реНрдп (рдЕрд▓реНрдкрд╡рд┐рд░рд╛рдо рд╕реЗ рдЕрд▓рдЧ)",
      enter_family_members: "рдЕрд▓реНрдкрд╡рд┐рд░рд╛рдо рд╕реЗ рдЕрд▓рдЧ рдХрд░рдХреЗ рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рд╕рджрд╕реНрдпреЛрдВ рдХреЗ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ",

      // Emergency
      emergency_sos_request: "рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдПрд╕рдУрдПрд╕ рдЕрдиреБрд░реЛрдз",
      emergency_type: "рдЖрдкрд╛рддрдХрд╛рд▓ рдХрд╛ рдкреНрд░рдХрд╛рд░",
      select_emergency_type: "рдЖрдкрд╛рддрдХрд╛рд▓ рдХрд╛ рдкреНрд░рдХрд╛рд░ рдЪреБрдиреЗрдВ",
      medical_emergency: "рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдЖрдкрд╛рддрдХрд╛рд▓",
      blood_needed: "рд░рдХреНрдд рдХреА рддрддреНрдХрд╛рд▓ рдЖрд╡рд╢реНрдпрдХрддрд╛",
      accident: "рджреБрд░реНрдШрдЯрдирд╛",
      fire_emergency: "рдЕрдЧреНрдирд┐ рдЖрдкрд╛рддрдХрд╛рд▓",
      other: "рдЕрдиреНрдп",
      emergency_message: "рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рдВрджреЗрд╢",
      describe_emergency: "рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реНрдерд┐рддрд┐ рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ",
      location: "рд╕реНрдерд╛рди",
      enter_location: "рд╕реНрдерд╛рди рджрд░реНрдЬ рдХрд░реЗрдВ",
      contact_number: "рд╕рдВрдкрд░реНрдХ рдирдВрдмрд░",
      enter_contact_number: "рд╕рдВрдкрд░реНрдХ рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ",
      send_emergency_alert: "рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЕрд▓рд░реНрдЯ рднреЗрдЬреЗрдВ",

      // Events
      create_new_event: "рдирдпрд╛ рдХрд╛рд░реНрдпрдХреНрд░рдо рдмрдирд╛рдПрдВ",
      event_title: "рдХрд╛рд░реНрдпрдХреНрд░рдо рдХрд╛ рд╢реАрд░реНрд╖рдХ",
      enter_event_title: "рдХрд╛рд░реНрдпрдХреНрд░рдо рдХрд╛ рд╢реАрд░реНрд╖рдХ рджрд░реНрдЬ рдХрд░реЗрдВ",
      event_date: "рдХрд╛рд░реНрдпрдХреНрд░рдо рдХреА рддрд╛рд░реАрдЦ",
      enter_event_location: "рдХрд╛рд░реНрдпрдХреНрд░рдо рдХрд╛ рд╕реНрдерд╛рди рджрд░реНрдЬ рдХрд░реЗрдВ",
      description: "рд╡рд┐рд╡рд░рдг",
      enter_event_description: "рдХрд╛рд░реНрдпрдХреНрд░рдо рдХрд╛ рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВ",
      create_event: "рдХрд╛рд░реНрдпрдХреНрд░рдо рдмрдирд╛рдПрдВ",

      // Actions & Others
      view_profile: "рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рджреЗрдЦреЗрдВ",
      edit: "рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ",
      delete: "рд╣рдЯрд╛рдПрдВ",
      save: "рд╕реЗрд╡ рдХрд░реЗрдВ",
      cancel: "рд░рджреНрдж рдХрд░реЗрдВ",
      submit: "рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ",
      search: "рдЦреЛрдЬреЗрдВ",
      filter: "рдлрд╝рд┐рд▓реНрдЯрд░",
      apply: "рдЖрд╡реЗрджрди рдХрд░реЗрдВ",
      express_interest: "рд░реБрдЪрд┐ рд╡реНрдпрдХреНрдд рдХрд░реЗрдВ",
      share_post: "рдкреЛрд╕реНрдЯ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ",
      like: "рдкрд╕рдВрдж",
      comment: "рдЯрд┐рдкреНрдкрдгреА",
      share: "рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ",
      age: "рдЖрдпреБ",
      profession: "рдкреЗрд╢рд╛",
      education: "рд╢рд┐рдХреНрд╖рд╛"
    },

    gu: {
      // Navigation & Headers
      app_title: "ЁЯО╡ ркбркмркЧрк░ рк╕ркорк╛ркЬ рк╕ркорлБркжрк╛ркп",
      app_title_short: "ЁЯО╡ ркбркмркЧрк░ рк╕ркорк╛ркЬ",
      login: "рк▓рлЙркЧрк┐рки",
      register: "ркирлЛркВркзркгрлА",
      logout: "рк▓рлЙркЧркЖркЙркЯ",
      nav_home: "рк╣рлЛрко",
      nav_directory: "ркбрк┐рк░рлЗркХрлНркЯрк░рлА",
      nav_family: "ркХрлБркЯрлБркВркм",
      nav_calendar: "ркХрлЗрк▓рлЗркирлНркбрк░",
      nav_matrimony: "рк▓ркЧрлНрки",
      nav_jobs: "ркирлЛркХрк░рлА",
      nav_emergency: "ркХркЯрлЛркХркЯрлА",
      nav_admin: "ркПркбркорк┐рки",
      nav_help: "ркоркжркж",

      // Hero Section
      hero_title: "ркПркХркЬрлБркЯ рк░рк╣рлЛ, ркЬрлЛркбрк╛ркпрлЗрк▓рк╛ рк░рк╣рлЛ",
      hero_subtitle: "ркбркмркЧрк░ рк╕ркорк╛ркЬ ркорк╛ркЯрлЗ ркПркХрлАркХрлГркд ркбрк┐ркЬрк┐ркЯрк▓ рккрлНрк▓рлЗркЯрклрлЛрк░рлНрко",
      hero_description: "ркдркорк╛рк░рк╛ рк╕ркорлБркжрк╛ркп рк╕рк╛ркерлЗ ркЬрлЛркбрк╛ркУ, рккрк░ркВрккрк░рк╛ркУ рк╕рк╛ркЪрк╡рлЛ, ркЕркирлЗ рк╢рк╣рлЗрк░рлЛ ркЕркирлЗ рккрлЗркврлАркУркорк╛ркВ ркоркЬркмрлВркд ркмркВркзрки ркмркирк╛рк╡рлЛ.",
      stats_families: "ркХрлБркЯрлБркВркмрлЛ",
      stats_members: "рк╕ркнрлНркпрлЛ",
      stats_states: "рк░рк╛ркЬрлНркпрлЛ",
      join_community: "ркЕркорк╛рк░рк╛ рк╕ркорлБркжрк╛ркпркорк╛ркВ ркЬрлЛркбрк╛ркУ",

      // Features
      app_features: "ркПрккрлНрк▓рк┐ркХрлЗрк╢рки рк╕рлБрк╡рк┐ркзрк╛ркУ",
      feature_family_title: "ркХрлМркЯрлБркВркмрк┐ркХ рккрлНрк░рлЛрклрк╛ркЗрк▓",
      feature_family_desc: "рк╕ркнрлНркп рккрлНрк░рлЛрклрк╛ркЗрк▓ ркЕркирлЗ рк╕ркВркмркВркз ркорлЗрккрк┐ркВркЧ рк╕рк╛ркерлЗ рк╕ркВрккрлВрк░рлНркг ркХрлМркЯрлБркВркмрк┐ркХ ркирлЛркВркзркгрлА",
      feature_feed_title: "рк╕рк╛ркорлБркжрк╛ркпрк┐ркХ рклрлАркб",
      feature_feed_desc: "рк╕ркорлБркжрк╛ркпркирк╛ ркЕрккркбрлЗркЯрлНрк╕, ркЙркдрлНрк╕рк╡рлЛ ркЕркирлЗ ркЬрк╛рк╣рлЗрк░рк╛ркдрлЛ рк╕рк╛ркерлЗ ркЬрлЛркбрк╛ркпрлЗрк▓рк╛ рк░рк╣рлЛ",
      feature_events_title: "ркЗрк╡рлЗркирлНркЯрлНрк╕ ркХрлЗрк▓рлЗркирлНркбрк░",
      feature_events_desc: "рк╕рк╛ркорлБркжрк╛ркпрк┐ркХ ркорлЗрк│рк╛рк╡ркбрк╛, рк▓ркЧрлНрки ркЕркирлЗ рк╕рк╛ркВрк╕рлНркХрлГркдрк┐ркХ ркЙркдрлНрк╕рк╡рлЛ ркЪрлВркХрк╢рлЛ ркирк╣рлАркВ",
      feature_matrimony_title: "рк▓ркЧрлНрки",
      feature_matrimony_desc: "ркЧрлЛрккркирлАркпркдрк╛ ркирк┐ркпркВркдрлНрк░ркгрлЛ рк╕рк╛ркерлЗ ркЕркорк╛рк░рк╛ рк╕ркорлБркжрк╛ркпркорк╛ркВ ркпрлЛркЧрлНркп ркорлЗркЪ рк╢рлЛркзрлЛ",
      feature_jobs_title: "ркирлЛркХрк░рлА ркЕркирлЗ ркзркВркзрлЛ",
      feature_jobs_desc: "рк╕ркорлБркжрк╛ркпркорк╛ркВ ркирлЛркХрк░рлАркирлА ркдркХрлЛ рк╢рлЛркзрлЛ ркЕркирлЗ ркзркВркзрк╛ркУркирлЗ рккрлНрк░рлЛркдрлНрк╕рк╛рк╣рки ркЖрккрлЛ",
      feature_blood_title: "рк░ркХрлНркдркжрк╛рки",
      feature_blood_desc: "ркдрлНрк╡рк░рк┐ркд рк╕рк╣рк╛ркп ркорк╛ркЯрлЗ ркХркЯрлЛркХркЯрлАркирлА рк╕рк╣рк╛ркп ркирлЗркЯрк╡рк░рлНркХ ркЕркирлЗ рк░ркХрлНркдркжрк╛ркдрк╛ ркбрк┐рк░рлЗркХрлНркЯрк░рлА",

      // Forms & Labels
      login_title: "ркдркорк╛рк░рк╛ ркПркХрк╛ркЙркирлНркЯркорк╛ркВ рк▓рлЙркЧрк┐рки ркХрк░рлЛ",
      mobile_number: "ркорлЛркмрк╛ркЗрк▓ ркиркВркмрк░",
      enter_mobile: "ркдркорк╛рк░рлЛ ркирлЛркВркзрк╛ркпрлЗрк▓ ркорлЛркмрк╛ркЗрк▓ ркиркВркмрк░ ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      otp: "ркУркЯрлАрккрлА",
      enter_otp: "ркУркЯрлАрккрлА ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      send_otp: "ркУркЯрлАрккрлА ркорлЛркХрк▓рлЛ",
      verify_login: "ркЪркХрк╛рк╕рлЛ ркЕркирлЗ рк▓рлЙркЧрк┐рки ркХрк░рлЛ",
      register_family: "ркдркорк╛рк░рк╛ ркХрлБркЯрлБркВркмркирлА ркирлЛркВркзркгрлА ркХрк░рлЛ",
      family_head_name: "ркХрлБркЯрлБркВркмркирк╛ ркорлБркЦрк┐ркпрк╛ркирлБркВ ркирк╛рко",
      enter_family_head_name: "ркХрлБркЯрлБркВркмркирк╛ ркорлБркЦрк┐ркпрк╛ркирлБркВ ркирк╛рко ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      city: "рк╢рк╣рлЗрк░",
      select_city: "рк╢рк╣рлЗрк░ рккрк╕ркВркж ркХрк░рлЛ",

      // Admin
      admin_access: "ркПркбркорк┐рки рккрлНрк░рк╡рлЗрк╢",
      enter_admin_password: "ркПркбркорк┐рки рккрк╛рк╕рк╡рк░рлНркб ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      enter_password: "рккрк╛рк╕рк╡рк░рлНркб ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      access_admin_panel: "ркПркбркорк┐рки рккрлЗркирк▓ рккрлНрк░рк╡рлЗрк╢",

      // Family Registration
      register_new_family: "ркирк╡рк╛ ркХрлБркЯрлБркВркмркирлА ркирлЛркВркзркгрлА ркХрк░рлЛ",
      family_surname: "ркХрлМркЯрлБркВркмрк┐ркХ ркЕркЯркХ",
      enter_family_surname: "ркХрлМркЯрлБркВркмрк┐ркХ ркЕркЯркХ ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      enter_city: "рк╢рк╣рлЗрк░ ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      family_members: "ркХрлБркЯрлБркВркмркирк╛ рк╕ркнрлНркпрлЛ (ркЕрк▓рлНрккрк╡рк┐рк░рк╛ркоркерлА ркЕрк▓ркЧ)",
      enter_family_members: "ркЕрк▓рлНрккрк╡рк┐рк░рк╛ркоркерлА ркЕрк▓ркЧ ркХрк░рлАркирлЗ ркХрлБркЯрлБркВркмркирк╛ рк╕ркнрлНркпрлЛркирк╛ ркирк╛рко ркжрк╛ркЦрк▓ ркХрк░рлЛ",

      // Emergency
      emergency_sos_request: "ркХркЯрлЛркХркЯрлА ркПрк╕ркУркПрк╕ рк╡рк┐ркиркВркдрлА",
      emergency_type: "ркХркЯрлЛркХркЯрлАркирлЛ рккрлНрк░ркХрк╛рк░",
      select_emergency_type: "ркХркЯрлЛркХркЯрлАркирлЛ рккрлНрк░ркХрк╛рк░ рккрк╕ркВркж ркХрк░рлЛ",
      medical_emergency: "ркдркмрлАркмрлА ркХркЯрлЛркХркЯрлА",
      blood_needed: "рк▓рлЛрк╣рлАркирлА ркдрк╛ркдрлНркХрк╛рк▓рк┐ркХ ркЬрк░рлВрк░",
      accident: "ркЕркХрк╕рлНркорк╛ркд",
      fire_emergency: "ркЖркЧркирлА ркХркЯрлЛркХркЯрлА",
      other: "ркЕркирлНркп",
      emergency_message: "ркХркЯрлЛркХркЯрлАркирлЛ рк╕ркВркжрлЗрк╢",
      describe_emergency: "ркХркЯрлЛркХркЯрлАркирлА рккрк░рк┐рк╕рлНркерк┐ркдрк┐ркирлБркВ рк╡рк░рлНркгрки ркХрк░рлЛ",
      location: "рк╕рлНркерк╛рки",
      enter_location: "рк╕рлНркерк╛рки ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      contact_number: "рк╕ркВрккрк░рлНркХ ркиркВркмрк░",
      enter_contact_number: "рк╕ркВрккрк░рлНркХ ркиркВркмрк░ ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      send_emergency_alert: "ркХркЯрлЛркХркЯрлАркирлА ркЪрлЗркдрк╡ркгрлА ркорлЛркХрк▓рлЛ",

      // Events
      create_new_event: "ркирк╡рлЛ ркХрк╛рк░рлНркпркХрлНрк░рко ркмркирк╛рк╡рлЛ",
      event_title: "ркХрк╛рк░рлНркпркХрлНрк░ркоркирлБркВ рк╢рлАрк░рлНрк╖ркХ",
      enter_event_title: "ркХрк╛рк░рлНркпркХрлНрк░ркоркирлБркВ рк╢рлАрк░рлНрк╖ркХ ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      event_date: "ркХрк╛рк░рлНркпркХрлНрк░ркоркирлА ркдрк╛рк░рлАркЦ",
      enter_event_location: "ркХрк╛рк░рлНркпркХрлНрк░ркоркирлБркВ рк╕рлНркерк╛рки ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      description: "рк╡рк░рлНркгрки",
      enter_event_description: "ркХрк╛рк░рлНркпркХрлНрк░ркоркирлБркВ рк╡рк░рлНркгрки ркжрк╛ркЦрк▓ ркХрк░рлЛ",
      create_event: "ркХрк╛рк░рлНркпркХрлНрк░рко ркмркирк╛рк╡рлЛ",

      // Actions & Others
      view_profile: "рккрлНрк░рлЛрклрк╛ркЗрк▓ ркЬрлБркУ",
      edit: "рк╕ркВрккрк╛ркжрки ркХрк░рлЛ",
      delete: "ркбрк┐рк▓рлАркЯ ркХрк░рлЛ",
      save: "рк╕рлЗрк╡ ркХрк░рлЛ",
      cancel: "рк░ркж ркХрк░рлЛ",
      submit: "рк╕ркмркорк┐ркЯ ркХрк░рлЛ",
      search: "рк╢рлЛркзрлЛ",
      filter: "рклрк┐рк▓рлНркЯрк░",
      apply: "ркЕрк░ркЬрлА ркХрк░рлЛ",
      express_interest: "рк░рлБркЪрк┐ ркжрк░рлНрк╢рк╛рк╡рлЛ",
      share_post: "рккрлЛрк╕рлНркЯ рк╢рлЗрк░ ркХрк░рлЛ",
      like: "рккрк╕ркВркж",
      comment: "ркЯрк┐рккрлНрккркгрлА",
      share: "рк╢рлЗрк░ ркХрк░рлЛ",
      age: "ркЙркорк░",
      profession: "рк╡рлНркпрк╡рк╕рк╛ркп",
      education: "рк╢рк┐ркХрлНрк╖ркг"
    }
  },

  // Data Arrays - Enhanced with multilingual support
  data: {
    members: [
      {
        id: 1,
        familyId: 1,
        name: {en: "Ramesh Dabgar", hi: "рд░рдореЗрд╢ рдбрдмрдЧрд░", gu: "рк░ркорлЗрк╢ ркбркмркЧрк░"},
        dob: "1980-01-10",
        city: {en: "Lunawada", hi: "рд▓реВрдгрд╛рд╡рд╛рдбрд╛", gu: "рк▓рлВркгрк╛рк╡рк╛ркбрк╛"},
        blood: "B+",
        profession: {en: "Teacher", hi: "рд╢рд┐рдХреНрд╖рдХ", gu: "рк╢рк┐ркХрлНрк╖ркХ"}, 
        education: "MA",
        relationship: {en: "Father", hi: "рдкрд┐рддрд╛", gu: "рккрк┐ркдрк╛"},
        phone: "+91-98765-43210"
      },
      {
        id: 2,
        familyId: 1,
        name: {en: "Sita Dabgar", hi: "рд╕реАрддрд╛ рдбрдмрдЧрд░", gu: "рк╕рлАркдрк╛ ркбркмркЧрк░"},
        dob: "1985-03-05", 
        city: {en: "Lunawada", hi: "рд▓реВрдгрд╛рд╡рд╛рдбрд╛", gu: "рк▓рлВркгрк╛рк╡рк╛ркбрк╛"},
        blood: "O+",
        profession: {en: "Homemaker", hi: "рдЧреГрд╣рд┐рдгреА", gu: "ркЧрлГрк╣рк┐ркгрлА"},
        education: "BA",
        relationship: {en: "Mother", hi: "рдорд╛рддрд╛", gu: "ркорк╛ркдрк╛"},
        phone: "+91-98765-43211"
      },
      {
        id: 3,
        familyId: 1,
        name: {en: "Rahul Dabgar", hi: "рд░рд╛рд╣реБрд▓ рдбрдмрдЧрд░", gu: "рк░рк╛рк╣рлБрк▓ ркбркмркЧрк░"},
        dob: "2004-07-19",
        city: {en: "Lunawada", hi: "рд▓реВрдгрд╛рд╡рд╛рдбрд╛", gu: "рк▓рлВркгрк╛рк╡рк╛ркбрк╛"}, 
        blood: "A+",
        profession: {en: "Student", hi: "рдЫрд╛рддреНрд░", gu: "рк╡рк┐ркжрлНркпрк╛рк░рлНркерлА"},
        education: "BSc",
        relationship: {en: "Son", hi: "рдкреБрддреНрд░", gu: "рккрлБркдрлНрк░"},
        phone: "+91-98765-43212"
      },
      {
        id: 4,
        familyId: 2,
        name: {en: "Suresh Dabgar", hi: "рд╕реБрд░реЗрд╢ рдбрдмрдЧрд░", gu: "рк╕рлБрк░рлЗрк╢ ркбркмркЧрк░"},
        dob: "1975-05-12",
        city: {en: "Ahmedabad", hi: "рдЕрд╣рдорджрд╛рдмрд╛рдж", gu: "ркЕркоркжрк╛рк╡рк╛ркж"},
        blood: "AB+",
        profession: {en: "Business Owner", hi: "рд╡реНрдпрд╛рдкрд╛рд░реА", gu: "ркзркВркзрк╛ркжрк╛рк░рлА"},
        education: "B.Com",
        relationship: {en: "Father", hi: "рдкрд┐рддрд╛", gu: "рккрк┐ркдрк╛"},
        phone: "+91-98765-43213"
      },
      {
        id: 5,
        familyId: 2,
        name: {en: "Priya Dabgar", hi: "рдкреНрд░рд┐рдпрд╛ рдбрдмрдЧрд░", gu: "рккрлНрк░рк┐ркпрк╛ ркбркмркЧрк░"}, 
        dob: "1990-08-25",
        city: {en: "Surat", hi: "рд╕реВрд░рдд", gu: "рк╕рлБрк░ркд"},
        blood: "B-",
        profession: {en: "Software Engineer", hi: "рд╕реЙрдлреНрдЯрд╡реЗрдпрд░ рдЗрдВрдЬреАрдирд┐рдпрд░", gu: "рк╕рлЛрклрлНркЯрк╡рлЗрк░ ркПркирлНркЬрк┐ркирк┐ркпрк░"},
        education: "B.Tech",
        relationship: {en: "Daughter", hi: "рдкреБрддреНрд░реА", gu: "рккрлБркдрлНрк░рлА"},
        phone: "+91-98765-43214"
      }
    ],

    families: [
      {
        id: 1,
        surname: {en: "Dabgar", hi: "рдбрдмрдЧрд░", gu: "ркбркмркЧрк░"},
        city: {en: "Lunawada", hi: "рд▓реВрдгрд╛рд╡рд╛рдбрд╛", gu: "рк▓рлВркгрк╛рк╡рк╛ркбрк╛"}, 
        headId: 1,
        members: [
          {en: "Ramesh Dabgar", hi: "рд░рдореЗрд╢ рдбрдмрдЧрд░", gu: "рк░ркорлЗрк╢ ркбркмркЧрк░"}, 
          {en: "Sita Dabgar", hi: "рд╕реАрддрд╛ рдбрдмрдЧрд░", gu: "рк╕рлАркдрк╛ ркбркмркЧрк░"}, 
          {en: "Rahul Dabgar", hi: "рд░рд╛рд╣реБрд▓ рдбрдмрдЧрд░", gu: "рк░рк╛рк╣рлБрк▓ ркбркмркЧрк░"}
        ]
      },
      {
        id: 2,
        surname: {en: "Dabgar", hi: "рдбрдмрдЧрд░", gu: "ркбркмркЧрк░"},
        city: {en: "Ahmedabad", hi: "рдЕрд╣рдорджрд╛рдмрд╛рдж", gu: "ркЕркоркжрк╛рк╡рк╛ркж"},
        headId: 4, 
        members: [
          {en: "Suresh Dabgar", hi: "рд╕реБрд░реЗрд╢ рдбрдмрдЧрд░", gu: "рк╕рлБрк░рлЗрк╢ ркбркмркЧрк░"}, 
          {en: "Meera Dabgar", hi: "рдореАрд░рд╛ рдбрдмрдЧрд░", gu: "ркорлАрк░рк╛ ркбркмркЧрк░"}, 
          {en: "Priya Dabgar", hi: "рдкреНрд░рд┐рдпрд╛ рдбрдмрдЧрд░", gu: "рккрлНрк░рк┐ркпрк╛ ркбркмркЧрк░"}
        ]
      }
    ],

    events: [
      {
        id: 1,
        type: "Post",
        title: {en: "Happy Navratri to all!", hi: "рд╕рднреА рдХреЛ рдирд╡рд░рд╛рддреНрд░рд┐ рдХреА рд╢реБрднрдХрд╛рдордирд╛рдПрдВ!", gu: "ркмркзрк╛ркирлЗ ркирк╡рк░рк╛ркдрлНрк░рк┐ркирлА рк╢рлБркнркХрк╛ркоркирк╛ркУ!"},
        date: "2025-10-05",
        authorId: 1,
        description: {en: "Wishing everyone a blessed Navratri celebration!", hi: "рд╕рднреА рдХреЛ рдзрдиреНрдп рдирд╡рд░рд╛рддреНрд░рд┐ рдЙрддреНрд╕рд╡ рдХреА рдХрд╛рдордирд╛!", gu: "ркмркзрк╛ркирлЗ ркЖрк╢рлАрк░рлНрк╡рк╛ркжрк┐ркд ркирк╡рк░рк╛ркдрлНрк░рк┐ ркЙркдрлНрк╕рк╡ркирлА ркХрк╛ркоркирк╛!"}
      },
      {
        id: 2,
        type: "Wedding", 
        title: {en: "Wedding of Rahul & Sneha", hi: "рд░рд╛рд╣реБрд▓ рдФрд░ рд╕реНрдиреЗрд╣рд╛ рдХрд╛ рд╡рд┐рд╡рд╛рд╣", gu: "рк░рк╛рк╣рлБрк▓ ркЕркирлЗ рк╕рлНркирлЗрк╣рк╛ркирлБркВ рк▓ркЧрлНрки"},
        date: "2025-12-10",
        location: {en: "Ahmedabad", hi: "рдЕрд╣рдорджрд╛рдмрд╛рдж", gu: "ркЕркоркжрк╛рк╡рк╛ркж"},
        familyId: 1,
        description: {en: "Join us for this auspicious occasion", hi: "рдЗрд╕ рд╢реБрдн рдЕрд╡рд╕рд░ рдкрд░ рд╣рдорд╛рд░реЗ рд╕рд╛рде рдЬреБрдбрд╝реЗрдВ", gu: "ркЖ рк╢рлБркн ркЕрк╡рк╕рк░рлЗ ркЕркорк╛рк░рлА рк╕рк╛ркерлЗ ркЬрлЛркбрк╛ркУ"}
      },
      {
        id: 3,
        type: "Community",
        title: {en: "Annual Samaj Meet", hi: "рд╡рд╛рд░реНрд╖рд┐рдХ рд╕рдорд╛рдЬ рдорд┐рд▓рди", gu: "рк╡рк╛рк░рлНрк╖рк┐ркХ рк╕ркорк╛ркЬ ркорк┐рк▓рки"},
        date: "2025-08-15",
        location: {en: "Community Hall, Vadodara", hi: "рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╣реЙрд▓, рд╡рдбреЛрджрд░рд╛", gu: "ркХрлЛркорлНркпрлБркирк┐ркЯрлА рк╣рлЛрк▓, рк╡ркбрлЛркжрк░рк╛"},
        description: {en: "Annual community gathering and cultural program", hi: "рд╡рд╛рд░реНрд╖рд┐рдХ рд╕рд╛рдореБрджрд╛рдпрд┐рдХ рд╕рднрд╛ рдФрд░ рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рдХрд╛рд░реНрдпрдХреНрд░рдо", gu: "рк╡рк╛рк░рлНрк╖рк┐ркХ рк╕рк╛ркорлБрджрк╛ркпрк┐ркХ ркорлЗрк│рк╛рк╡ркбрлЛ ркЕркирлЗ рк╕рк╛ркВрк╕рлНркХрлГркдрк┐ркХ ркХрк╛рк░рлНркпркХрлНрк░рко"}
      }
    ],

    matrimony: [
      {
        id: 1,
        memberId: 3,
        gender: {en: "Male", hi: "рдкреБрд░реБрд╖", gu: "рккрлБрк░рлБрк╖"},
        age: 21,
        education: "BSc",
        job: {en: "Software Trainee", hi: "рд╕реЙрдлреНрдЯрд╡реЗрдпрд░ рдкреНрд░рд╢рд┐рдХреНрд╖реБ", gu: "рк╕рлЛрклрлНркЯрк╡рлЗрк░ ркЯрлНрк░рлЗркЗркирлА"}, 
        city: {en: "Ahmedabad", hi: "рдЕрд╣рдорджрд╛рдмрд╛рдж", gu: "ркЕркоркжрк╛рк╡рк╛ркж"},
        caste: {en: "Dabgar", hi: "рдбрдмрдЧрд░", gu: "ркбркмркЧрк░"},
        height: "5'8\"",
        lookingFor: {en: "Well-educated, family-oriented girl from Dabgar community", hi: "рдбрдмрдЧрд░ рд╕рдореБрджрд╛рдп рдХреА рд╕реБрд╢рд┐рдХреНрд╖рд┐рдд, рдкрд╛рд░рд┐рд╡рд╛рд░рд┐рдХ рд▓рдбрд╝рдХреА", gu: "ркбркмркЧрк░ рк╕ркорлБркжрк╛ркпркирлА рк╕рлБрк╢рк┐ркХрлНрк╖рк┐ркд, ркХрлМркЯрлБркВркмрк┐ркХ ркЫрлЛркХрк░рлА"}
      }
    ],

    jobs: [
      {
        id: 1,
        title: {en: "Sales Executive", hi: "рдмрд┐рдХреНрд░реА рдХрд╛рд░реНрдпрдХрд╛рд░реА", gu: "рк╕рлЗрк▓рлНрк╕ ркПркХрлНркЭрк┐ркХрлНркпрлБркЯрк┐рк╡"},
        company: {en: "Samaj Trading", hi: "рд╕рдорд╛рдЬ рдЯреНрд░реЗрдбрд┐рдВрдЧ", gu: "рк╕ркорк╛ркЬ ркЯрлНрк░рлЗркбрк┐ркВркЧ"},
        location: {en: "Surat", hi: "рд╕реВрд░рдд", gu: "рк╕рлБрк░ркд"},
        posterId: 1,
        type: {en: "Full-time", hi: "рдкреВрд░реНрдгрдХрд╛рд▓рд┐рдХ", gu: "рккрлВрк░рлНркгркХрк╛рк▓рк┐ркХ"},
        salary: "тВ╣20,000 - тВ╣30,000",
        description: {en: "Looking for experienced sales professional for expanding business", hi: "рд╡рд┐рд╕реНрддрд╛рд░рд┐рдд рд╡реНрдпрд╛рдкрд╛рд░ рдХреЗ рд▓рд┐рдП рдЕрдиреБрднрд╡реА рдмрд┐рдХреНрд░реА рдкреЗрд╢реЗрд╡рд░ рдХреА рддрд▓рд╛рд╢", gu: "рк╡рк┐рк╕рлНркдрлГркд ркзркВркзрк╛ ркорк╛ркЯрлЗ ркЕркирлБркнрк╡рлА рк╕рлЗрк▓рлНрк╕ рккрлНрк░рлЛрклрлЗрк╢ркирк▓ркирлА рк╢рлЛркз"}
      }
    ],

    bloodDonors: [
      {
        memberId: 2,
        blood: "O+",
        city: {en: "Lunawada", hi: "рд▓реВрдгрд╛рд╡рд╛рдбрд╛", gu: "рк▓рлВркгрк╛рк╡рк╛ркбрк╛"}, 
        phone: "9999999999",
        name: {en: "Sita Dabgar", hi: "рд╕реАрддрд╛ рдбрдмрдЧрд░", gu: "рк╕рлАркдрк╛ ркбркмркЧрк░"},
        available: true,
        lastDonation: "2025-05-15"
      },
      {
        memberId: 1,
        blood: "B+",
        city: {en: "Lunawada", hi: "рд▓реВрдгрд╛рд╡рд╛рдбрд╛", gu: "рк▓рлВркгрк╛рк╡рк╛ркбрк╛"},
        phone: "9999999998", 
        name: {en: "Ramesh Dabgar", hi: "рд░рдореЗрд╢ рдбрдмрдЧрд░", gu: "рк░ркорлЗрк╢ ркбркмркЧрк░"},
        available: true,
        lastDonation: "2025-04-20"
      }
    ],

    posts: [
      {
        id: 1,
        authorId: 1,
        content: {
          en: "Proud to announce our community's traditional music has been recognized! ЁЯО╡",
          hi: "рдЧрд░реНрд╡ рд╕реЗ рдШреЛрд╖рдгрд╛ рдХрд░рддреЗ рд╣реИрдВ рдХрд┐ рд╣рдорд╛рд░реЗ рд╕рдореБрджрд╛рдп рдХреЗ рдкрд╛рд░рдВрдкрд░рд┐рдХ рд╕рдВрдЧреАрдд рдХреЛ рдорд╛рдиреНрдпрддрд╛ рдорд┐рд▓реА рд╣реИ! ЁЯО╡",
          gu: "ркЧрк░рлНрк╡ркерлА ркЬрк╛рк╣рлЗрк░ ркХрк░рк╡рлБркВ ркХрлЗ ркЕркорк╛рк░рк╛ рк╕ркорлБркжрк╛ркпркирк╛ рккрк░ркВрккрк░рк╛ркЧркд рк╕ркВркЧрлАркдркирлЗ ркорк╛ркирлНркпркдрк╛ ркорк│рлА ркЫрлЗ! ЁЯО╡"
        },
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
        likes: 15,
        liked: false,
        type: "achievement"
      },
      {
        id: 2, 
        authorId: 4,
        content: {
          en: "Looking forward to our Annual Samaj Meet. Let's celebrate our heritage together! ЁЯОЙ",
          hi: "рд╣рдорд╛рд░реЗ рд╡рд╛рд░реНрд╖рд┐рдХ рд╕рдорд╛рдЬ рдорд┐рд▓рди рдХреА рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВред рдЖрдЗрдП рдЕрдкрдиреА рд╡рд┐рд░рд╛рд╕рдд рдХреЛ рдПрдХ рд╕рд╛рде рдордирд╛рддреЗ рд╣реИрдВ! ЁЯОЙ",
          gu: "ркЕркорк╛рк░рк╛ рк╡рк╛рк░рлНрк╖рк┐ркХ рк╕ркорк╛ркЬ ркорк┐рк▓ркиркирлА рк░рк╛рк╣ ркЬрлЛркИ рк░рк╣рлНркпрк╛ ркЫрлАркП. ркЪрк╛рк▓рлЛ ркЕркорк╛рк░рк╛ рк╡рк╛рк░рк╕рк╛ркирлА ркПркХ рк╕рк╛ркерлЗ ркЙркЬрк╡ркгрлА ркХрк░рлАркП! ЁЯОЙ"
        },
        timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000),
        likes: 23,
        liked: true,
        type: "announcement" 
      }
    ]
  },

  // Initialize the application
  init() {
    this.loadLanguagePreference();
    this.setupEventListeners();
    this.setupRouting();
    this.updateLanguage();
    console.log('Dabgar Samaj Community App Initialized with Multilingual Support');
  },

  // Language switching functionality
  loadLanguagePreference() {
    const savedLang = localStorage.getItem('dabgar_samaj_language');
    if (savedLang && this.translations[savedLang]) {
      this.currentLanguage = savedLang;
    } else {
      const browserLang = navigator.language.toLowerCase();
      if (browserLang.startsWith('hi')) {
        this.currentLanguage = 'hi';
      } else if (browserLang.startsWith('gu')) {
        this.currentLanguage = 'gu';
      } else {
        this.currentLanguage = 'en';
      }
    }
  },

  switchLanguage(lang) {
    if (this.translations[lang]) {
      this.currentLanguage = lang;
      localStorage.setItem('dabgar_samaj_language', lang);
      this.updateLanguage();
      
      // Update language buttons
      document.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.getAttribute('data-lang') === lang) {
          btn.classList.add('active');
        }
      });

      // Refresh current view with new language
      if (this.currentUser && this.currentView) {
        this.renderView(this.currentView);
      }
    }
  },

  updateLanguage() {
    // Update document language and font class
    document.documentElement.lang = this.currentLanguage;
    document.body.className = `lang-${this.currentLanguage}`;

    // Update all elements with data-i18n attribute
    document.querySelectorAll('[data-i18n]').forEach(element => {
      const key = element.getAttribute('data-i18n');
      if (this.translations[this.currentLanguage][key]) {
        element.textContent = this.translations[this.currentLanguage][key];
      }
    });

    // Update placeholders
    document.querySelectorAll('[data-i18n-placeholder]').forEach(element => {
      const key = element.getAttribute('data-i18n-placeholder');
      if (this.translations[this.currentLanguage][key]) {
        element.placeholder = this.translations[this.currentLanguage][key];
      }
    });

    // Update active language buttons
    document.querySelectorAll('.lang-btn').forEach(btn => {
      btn.classList.remove('active');
      if (btn.getAttribute('data-lang') === this.currentLanguage) {
        btn.classList.add('active');
      }
    });
  },

  // Helper method to get translated text
  t(key) {
    return this.translations[this.currentLanguage][key] || key;
  },

  // Helper method to get multilingual data
  getLocalizedText(obj) {
    if (typeof obj === 'object' && obj[this.currentLanguage]) {
      return obj[this.currentLanguage];
    }
    return obj;
  },

  // Event Listeners Setup
  setupEventListeners() {
    // Modal close handlers
    document.querySelectorAll('.modal').forEach(modal => {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.classList.add('hidden');
        }
      });
    });

    // Form submissions
    this.setupFormHandlers();
    
    // Navigation
    document.querySelectorAll('.nav-link').forEach(link => {
      link.addEventListener('click', (e) => {
        const section = e.target.getAttribute('data-section');
        window.location.hash = section;
      });
    });
  },

  // Hash-based routing
  setupRouting() {
    window.addEventListener('hashchange', () => this.handleHashChange());
  },

  handleHashChange() {
    const hash = window.location.hash.replace('#', '');
    if (hash && this.currentUser) {
      this.currentView = hash;
      this.renderView(hash);
      this.updateNavigation(hash);
    }
  },

  updateNavigation(activeSection) {
    document.querySelectorAll('.nav-link').forEach(link => {
      link.classList.remove('active');
      if (link.getAttribute('data-section') === activeSection) {
        link.classList.add('active');
      }
    });
  },

  // Main view rendering
  renderView(viewName) {
    const viewContainer = document.getElementById('view');
    if (!viewContainer) return;

    switch(viewName) {
      case 'home':
        this.renderHomeView();
        break;
      case 'directory': 
        this.renderDirectoryView();
        break;
      case 'family':
        this.renderFamilyView();
        break;
      case 'calendar':
        this.renderCalendarView();
        break;
      case 'matrimony':
        this.renderMatrimonyView();
        break;
      case 'jobs':
        this.renderJobsView();
        break;
      case 'emergency':
        this.renderEmergencyView();
        break;
      case 'admin':
        this.renderAdminView();
        break;
      case 'help':
        this.renderHelpView();
        break;
      default:
        this.renderHomeView();
    }
  },

  // View renderers with multilingual support
  renderHomeView() {
    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <div class="feed-layout">
          <div class="feed-main">
            <div class="post-composer">
              <h3>${this.t('share_post')}</h3>
              <textarea class="form-control" id="new-post" placeholder="${this.t('share_post')}..."></textarea>
              <div class="post-actions">
                <button class="btn btn--primary" onclick="SamajApp.createPost()">${this.t('share_post')}</button>
              </div>
            </div>
            <div class="feed-posts" id="feed-posts">
              ${this.renderPosts()}
            </div>
          </div>
          <div class="feed-sidebar">
            <div class="card">
              <div class="card__body">
                <h4>${this.t('nav_calendar')}</h4>
                <div class="event-preview" id="upcoming-events">
                  ${this.renderUpcomingEvents()}
                </div>
              </div>
            </div>
            <div class="card">
              <div class="card__body">
                <h4>${this.t('stats_members')}</h4>
                <div class="stats-grid">
                  <div class="stat-item">
                    <span class="stat-value">${this.data.members.length}</span>
                    <span class="stat-label">${this.t('stats_members')}</span>
                  </div>
                  <div class="stat-item">
                    <span class="stat-value">${this.data.families.length}</span>
                    <span class="stat-label">${this.t('stats_families')}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  },

  renderDirectoryView() {
    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <div class="section-header">
          <h2>${this.t('nav_directory')}</h2>
        </div>
        <div class="search-filters">
          <input type="text" class="form-control" id="member-search" placeholder="${this.t('search')}...">
          <select class="form-control" id="blood-filter">
            <option value="">${this.t('filter')} - Blood Group</option>
            <option value="A+">A+</option>
            <option value="A-">A-</option>
            <option value="B+">B+</option>
            <option value="B-">B-</option>
            <option value="O+">O+</option>
            <option value="O-">O-</option>
            <option value="AB+">AB+</option>
            <option value="AB-">AB-</option>
          </select>
          <select class="form-control" id="city-filter">
            <option value="">${this.t('filter')} - ${this.t('city')}</option>
            <option value="Lunawada">${this.getLocalizedText({en: "Lunawada", hi: "рд▓реВрдгрд╛рд╡рд╛рдбрд╛", gu: "рк▓рлВркгрк╛рк╡рк╛ркбрк╛"})}</option>
            <option value="Ahmedabad">${this.getLocalizedText({en: "Ahmedabad", hi: "рдЕрд╣рдорджрд╛рдмрд╛рдж", gu: "ркЕркоркжрк╛рк╡рк╛ркж"})}</option>
            <option value="Surat">${this.getLocalizedText({en: "Surat", hi: "рд╕реВрд░рдд", gu: "рк╕рлБрк░ркд"})}</option>
          </select>
        </div>
        <div class="members-grid" id="members-grid">
          ${this.renderMembers()}
        </div>
      </div>
    `;
    
    this.setupMemberSearch();
  },

  renderFamilyView() {
    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <div class="section-header">
          <h2>${this.t('nav_family')}</h2>
          <button class="btn btn--primary" onclick="SamajApp.showModal('family-register-modal')">${this.t('register_new_family')}</button>
        </div>
        <div class="family-grid">
          ${this.renderFamilies()}
        </div>
      </div>
    `;
  },

  renderCalendarView() {
    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <div class="section-header">
          <h2>${this.t('nav_calendar')}</h2>
          <button class="btn btn--primary" onclick="SamajApp.showModal('create-event-modal')">${this.t('create_new_event')}</button>
        </div>
        <div class="events-grid">
          ${this.renderEvents()}
        </div>
      </div>
    `;
  },

  renderMatrimonyView() {
    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <div class="section-header">
          <h2>${this.t('nav_matrimony')}</h2>
        </div>
        <div class="matrimony-grid">
          ${this.renderMatrimonyProfiles()}
        </div>
      </div>
    `;
  },

  renderJobsView() {
    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <div class="section-header">
          <h2>${this.t('nav_jobs')}</h2>
        </div>
        <div class="jobs-grid">
          ${this.renderJobs()}
        </div>
      </div>
    `;
  },

  renderEmergencyView() {
    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <div class="emergency-header">
          <h2>ЁЯЪи ${this.t('nav_emergency')}</h2>
          <p>${this.t('feature_blood_desc')}</p>
        </div>
        <div class="emergency-buttons">
          <button class="emergency-btn" onclick="SamajApp.showModal('emergency-sos-modal')">
            ЁЯЪи ${this.t('send_emergency_alert')}
          </button>
          <button class="emergency-btn" onclick="SamajApp.callEmergency('108')">
            ЁЯУЮ Call 108 Ambulance
          </button>
        </div>
        <div class="blood-donor-search">
          <h3>${this.t('blood_needed')}</h3>
          <div class="blood-filters">
            <select class="form-control" id="blood-group-search">
              <option value="">Select Blood Group</option>
              <option value="A+">A+</option>
              <option value="A-">A-</option>
              <option value="B+">B+</option>
              <option value="B-">B-</option>
              <option value="O+">O+</option>
              <option value="O-">O-</option>
              <option value="AB+">AB+</option>
              <option value="AB-">AB-</option>
            </select>
            <select class="form-control" id="city-blood-search">
              <option value="">${this.t('city')}</option>
              <option value="Lunawada">${this.getLocalizedText({en: "Lunawada", hi: "рд▓реВрдгрд╛рд╡рд╛рдбрд╛", gu: "рк▓рлВркгрк╛рк╡рк╛ркбрк╛"})}</option>
              <option value="Ahmedabad">${this.getLocalizedText({en: "Ahmedabad", hi: "рдЕрд╣рдорджрд╛рдмрд╛рдж", gu: "ркЕркоркжрк╛рк╡рк╛ркж"})}</option>
              <option value="Surat">${this.getLocalizedText({en: "Surat", hi: "рд╕реВрд░рдд", gu: "рк╕рлБрк░ркд"})}</option>
            </select>
            <button class="btn btn--primary" onclick="SamajApp.searchBloodDonors()">${this.t('search')}</button>
          </div>
        </div>
        <div class="blood-donors" id="blood-donors">
          ${this.renderBloodDonors()}
        </div>
      </div>
    `;
  },

  renderAdminView() {
    if (!this.isAdmin) {
      this.showModal('admin-password-modal');
      return;
    }

    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <div class="section-header">
          <h2>${this.t('nav_admin')}</h2>
          <button class="btn btn--outline" onclick="SamajApp.logoutAdmin()">${this.t('logout')} Admin</button>
        </div>
        <div class="admin-panel">
          <h3>Manage Community</h3>
          <p>Admin functionality for managing members, events, and community features.</p>
        </div>
      </div>
    `;
  },

  renderHelpView() {
    const view = document.getElementById('view');
    view.innerHTML = `
      <div class="container">
        <h2>${this.t('nav_help')}</h2>
        
        <div class="help-section">
          <h3>How to Use the App</h3>
          <ul>
            <li>Switch languages using the language buttons in the header</li>
            <li>Browse community members in the Directory section</li>
            <li>Share updates in the Home feed</li>
            <li>View upcoming events in the Calendar</li>
            <li>Find matrimony matches in the Matrimony section</li>
            <li>Search for job opportunities in Jobs section</li>
            <li>Use Emergency section for urgent help and blood donors</li>
          </ul>
        </div>

        <div class="help-section">
          <h3>Contact Support</h3>
          <p>For technical support or community inquiries:</p>
          <ul>
            <li>Email: admin@dabgarsamaj.org</li>
            <li>WhatsApp: +91-98765-43210</li>
            <li>Community Hall: Samaj Bhavan, Lunawada</li>
          </ul>
        </div>
      </div>
    `;
  },

  // Helper rendering methods
  renderPosts() {
    return this.data.posts.map(post => {
      const author = this.data.members.find(m => m.id === post.authorId);
      const timeAgo = this.getTimeAgo(post.timestamp);
      const authorName = author ? this.getLocalizedText(author.name) : 'Community Member';
      const content = this.getLocalizedText(post.content);
      
      return `
        <div class="post">
          <div class="post-header">
            <div class="post-avatar">${this.getInitials(authorName)}</div>
            <div class="post-author">${authorName}</div>
            <div class="post-time">${timeAgo}</div>
          </div>
          <div class="post-content">${content}</div>
          <div class="post-actions">
            <button class="post-action ${post.liked ? 'liked' : ''}" onclick="SamajApp.toggleLike(${post.id})">
              тЭдя╕П ${post.likes}
            </button>
            <button class="post-action">ЁЯТм ${this.t('comment')}</button>
            <button class="post-action">ЁЯУд ${this.t('share')}</button>
          </div>
        </div>
      `;
    }).join('');
  },

  renderUpcomingEvents() {
    const upcomingEvents = this.data.events
      .filter(event => new Date(event.date) >= new Date())
      .slice(0, 3);
    
    return upcomingEvents.map(event => `
      <div class="event-preview-item">
        <div class="event-preview-date">${this.formatDate(event.date)}</div>
        <h4 class="event-preview-title">${this.getLocalizedText(event.title)}</h4>
      </div>
    `).join('');
  },

  renderEvents() {
    return this.data.events.map(event => `
      <div class="event-card">
        <div class="event-header">
          <div class="event-date">${this.formatDate(event.date)}</div>
          <h3 class="event-title">${this.getLocalizedText(event.title)}</h3>
          <div class="event-location">ЁЯУН ${this.getLocalizedText(event.location) || ''}</div>
        </div>
        <div class="event-body">
          <div class="event-description">${this.getLocalizedText(event.description)}</div>
        </div>
      </div>
    `).join('');
  },

  renderMembers() {
    return this.data.members.map(member => {
      const age = this.calculateAge(member.dob);
      const name = this.getLocalizedText(member.name);
      const city = this.getLocalizedText(member.city);
      const profession = this.getLocalizedText(member.profession);
      
      return `
        <div class="member-card">
          <div class="member-header">
            <div class="member-avatar">${this.getInitials(name)}</div>
            <div class="member-info">
              <h3>${name}</h3>
              <div class="member-location">ЁЯУН ${city}</div>
            </div>
          </div>
          <div class="member-details">
            <div class="member-detail">
              <strong>${this.t('age')}:</strong> <span>${age} years</span>
            </div>
            <div class="member-detail">
              <strong>Blood:</strong> <span>${member.blood}</span>
            </div>
            <div class="member-detail">
              <strong>${this.t('profession')}:</strong> <span>${profession}</span>
            </div>
            <div class="member-detail">
              <strong>${this.t('education')}:</strong> <span>${member.education}</span>
            </div>
          </div>
          <div class="member-actions">
            <button class="btn btn--primary btn--sm" onclick="SamajApp.viewMemberProfile(${member.id})">${this.t('view_profile')}</button>
          </div>
        </div>
      `;
    }).join('');
  },

  renderFamilies() {
    return this.data.families.map(family => {
      const head = this.data.members.find(m => m.id === family.headId);
      const surname = this.getLocalizedText(family.surname);
      const city = this.getLocalizedText(family.city);
      const headName = head ? this.getLocalizedText(head.name) : 'Not specified';
      
      return `
        <div class="family-card">
          <div class="family-header">
            <h3 class="family-name">${surname} Family</h3>
            <div class="family-city">ЁЯУН ${city}</div>
          </div>
          <div class="family-head">
            <strong>Family Head:</strong> ${headName}
          </div>
          <div class="family-members">
            <h4>Family Members:</h4>
            <ul>
              ${family.members.map(member => `<li>${this.getLocalizedText(member)}</li>`).join('')}
            </ul>
          </div>
        </div>
      `;
    }).join('');
  },

  renderMatrimonyProfiles() {
    return this.data.matrimony.map(profile => {
      const member = this.data.members.find(m => m.id === profile.memberId);
      const name = member ? this.getLocalizedText(member.name) : 'Member';
      const city = this.getLocalizedText(profile.city);
      const job = this.getLocalizedText(profile.job);
      const lookingFor = this.getLocalizedText(profile.lookingFor);
      
      return `
        <div class="matrimony-card">
          <div class="matrimony-header">
            <div class="matrimony-avatar">${this.getInitials(name)}</div>
            <h3 class="matrimony-name">${name}</h3>
            <div class="matrimony-age">${profile.age} years, ${city}</div>
          </div>
          <div class="matrimony-details">
            <div class="matrimony-detail">
              <strong>${this.t('education')}:</strong> <span>${profile.education}</span>
            </div>
            <div class="matrimony-detail">
              <strong>${this.t('profession')}:</strong> <span>${job}</span>
            </div>
            <div class="matrimony-detail">
              <strong>Height:</strong> <span>${profile.height}</span>
            </div>
          </div>
          <div class="matrimony-looking">
            <strong>Looking for:</strong> ${lookingFor}
          </div>
          <div class="matrimony-actions">
            <button class="btn btn--primary btn--sm btn--full-width" onclick="SamajApp.expressInterest(${profile.id})">${this.t('express_interest')}</button>
          </div>
        </div>
      `;
    }).join('');
  },

  renderJobs() {
    return this.data.jobs.map(job => {
      const poster = this.data.members.find(m => m.id === job.posterId);
      const title = this.getLocalizedText(job.title);
      const company = this.getLocalizedText(job.company);
      const location = this.getLocalizedText(job.location);
      const type = this.getLocalizedText(job.type);
      const description = this.getLocalizedText(job.description);
      const posterName = poster ? this.getLocalizedText(poster.name) : 'Community Member';
      
      return `
        <div class="job-card">
          <div class="job-header">
            <h3 class="job-title">${title}</h3>
            <div class="job-company">${company} тАв ${location}</div>
          </div>
          <div class="job-details">
            <div class="job-detail">
              <strong>Type:</strong> <span>${type}</span>
            </div>
            <div class="job-detail">
              <strong>Salary:</strong> <span>${job.salary}</span>
            </div>
          </div>
          <div class="job-description">${description}</div>
          <div class="job-footer">
            <div class="job-posted-by">Posted by: ${posterName}</div>
            <button class="btn btn--primary btn--sm" onclick="SamajApp.applyJob(${job.id})">${this.t('apply')}</button>
          </div>
        </div>
      `;
    }).join('');
  },

  renderBloodDonors() {
    return this.data.bloodDonors.map(donor => {
      const name = this.getLocalizedText(donor.name);
      const city = this.getLocalizedText(donor.city);
      
      return `
        <div class="donor-card">
          <div class="donor-blood">${donor.blood}</div>
          <div class="donor-info">
            <h4>${name}</h4>
            <div class="donor-location">ЁЯУН ${city}</div>
            <div class="donor-phone">ЁЯУЮ ${donor.phone}</div>
          </div>
          <div class="donor-status">
            <span class="status status--success">Available</span>
          </div>
        </div>
      `;
    }).join('');
  },

  // Authentication methods
  sendOTP(type) {
    const phoneInput = type === 'login' ? 
      document.getElementById('login-phone') : 
      document.getElementById('register-phone');
    
    if (!phoneInput) return;
    
    const phone = phoneInput.value;
    if (!phone) {
      alert('Please enter a valid mobile number');
      return;
    }

    alert(`OTP sent to ${phone}. Use 123456 for demo.`);
    
    if (type === 'login') {
      const verifyBtn = document.getElementById('verify-login-btn');
      if (verifyBtn) {
        verifyBtn.classList.remove('hidden');
      }
    }
  },

  login() {
    const phone = document.getElementById('login-phone')?.value;
    const otp = document.getElementById('login-otp')?.value;
    
    if (!phone || !otp) {
      alert('Please fill all fields');
      return;
    }
    
    if (otp !== '123456') {
      alert('Invalid OTP. Use 123456 for demo.');
      return;
    }
    
    this.currentUser = {
      name: this.getLocalizedText({en: 'Ramesh Dabgar', hi: 'рд░рдореЗрд╢ рдбрдмрдЧрд░', gu: 'рк░ркорлЗрк╢ ркбркмркЧрк░'}),
      phone: phone,
      city: this.getLocalizedText({en: 'Lunawada', hi: 'рд▓реВрдгрд╛рд╡рд╛рдбрд╛', gu: 'рк▓рлВркгрк╛рк╡рк╛ркбрк╛'})
    };
    
    this.hideModal('login-modal');
    this.showMainApp();
  },

  register() {
    const name = document.getElementById('family-head-name')?.value;
    const phone = document.getElementById('register-phone')?.value;
    const city = document.getElementById('city')?.value;
    
    if (!name || !phone || !city) {
      alert('Please fill all fields');
      return;
    }
    
    this.currentUser = { name, phone, city };
    
    this.hideModal('register-modal');
    alert(this.t('register_family') + ' successful! Welcome to Dabgar Samaj Community!');
    this.showMainApp();
  },

  showMainApp() {
    document.getElementById('landing-page').classList.add('hidden');
    document.getElementById('main-app').classList.remove('hidden');
    
    // Set default view to home
    window.location.hash = 'home';
    this.handleHashChange();
  },

  logout() {
    this.currentUser = null;
    this.isAdmin = false;
    document.getElementById('main-app').classList.add('hidden');
    document.getElementById('landing-page').classList.remove('hidden');
    window.location.hash = '';
  },

  // Modal handlers
  hideModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.add('hidden');
    }
  },

  showModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
      modal.classList.remove('hidden');
    }
    this.setupFormHandlers();
  },

  // Form handlers setup
  setupFormHandlers() {
    setTimeout(() => {
      const loginForm = document.getElementById('login-form');
      if (loginForm && !loginForm.hasListener) {
        loginForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.login();
        });
        loginForm.hasListener = true;
      }

      const registerForm = document.getElementById('register-form');
      if (registerForm && !registerForm.hasListener) {
        registerForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.register();
        });
        registerForm.hasListener = true;
      }

      const adminForm = document.getElementById('admin-password-form');
      if (adminForm && !adminForm.hasListener) {
        adminForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.authenticateAdmin();
        });
        adminForm.hasListener = true;
      }

      const familyForm = document.getElementById('family-register-form');
      if (familyForm && !familyForm.hasListener) {
        familyForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.registerFamily();
        });
        familyForm.hasListener = true;
      }

      const emergencyForm = document.getElementById('emergency-sos-form');
      if (emergencyForm && !emergencyForm.hasListener) {
        emergencyForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.sendEmergencyAlert();
        });
        emergencyForm.hasListener = true;
      }

      const eventForm = document.getElementById('create-event-form');
      if (eventForm && !eventForm.hasListener) {
        eventForm.addEventListener('submit', (e) => {
          e.preventDefault();
          this.createEvent();
        });
        eventForm.hasListener = true;
      }
    }, 100);
  },

  // Additional functionality
  authenticateAdmin() {
    const password = document.getElementById('admin-password')?.value;
    if (password === 'admin') {
      this.isAdmin = true;
      this.hideModal('admin-password-modal');
      this.renderAdminView();
    } else {
      alert('Invalid password. Use "admin" for demo.');
    }
  },

  logoutAdmin() {
    this.isAdmin = false;
    window.location.hash = 'home';
  },

  createPost() {
    const postInput = document.getElementById('new-post');
    if (!postInput) return;
    
    const content = postInput.value.trim();
    if (!content) {
      alert('Please write something to share');
      return;
    }
    
    const newPost = {
      id: this.data.posts.length + 1,
      authorId: 1,
      content: {
        en: content,
        hi: content,
        gu: content
      },
      timestamp: new Date(),
      likes: 0,
      liked: false,
      type: 'update'
    };
    
    this.data.posts.unshift(newPost);
    postInput.value = '';
    
    this.renderHomeView();
  },

  toggleLike(postId) {
    const post = this.data.posts.find(p => p.id === postId);
    if (post) {
      post.liked = !post.liked;
      post.likes += post.liked ? 1 : -1;
      this.renderView(this.currentView);
    }
  },

  setupMemberSearch() {
    const searchInput = document.getElementById('member-search');
    const bloodFilter = document.getElementById('blood-filter');
    const cityFilter = document.getElementById('city-filter');
    
    const performSearch = () => {
      // Search functionality would be implemented here
      console.log('Search performed');
    };
    
    if (searchInput) searchInput.addEventListener('input', performSearch);
    if (bloodFilter) bloodFilter.addEventListener('change', performSearch);
    if (cityFilter) cityFilter.addEventListener('change', performSearch);
  },

  viewMemberProfile(memberId) {
    const member = this.data.members.find(m => m.id === memberId);
    if (member) {
      const name = this.getLocalizedText(member.name);
      const city = this.getLocalizedText(member.city);
      const profession = this.getLocalizedText(member.profession);
      alert(`Viewing profile for ${name}\nCity: ${city}\nProfession: ${profession}\nPhone: ${member.phone || 'Not provided'}`);
    }
  },

  registerFamily() {
    alert('Family registration functionality');
  },

  sendEmergencyAlert() {
    alert('Emergency alert sent successfully!');
    this.hideModal('emergency-sos-modal');
  },

  createEvent() {
    alert('Event created successfully!');
    this.hideModal('create-event-modal');
  },

  searchBloodDonors() {
    console.log('Blood donor search performed');
  },

  callEmergency(number) {
    alert(`Calling ${number}...\nIn a real app, this would dial the emergency number.`);
  },

  applyJob(jobId) {
    const job = this.data.jobs.find(j => j.id === jobId);
    if (job) {
      const title = this.getLocalizedText(job.title);
      const company = this.getLocalizedText(job.company);
      alert(`Application submitted for ${title} position at ${company}!`);
    }
  },

  expressInterest(profileId) {
    const profile = this.data.matrimony.find(p => p.id === profileId);
    const member = this.data.members.find(m => m.id === profile?.memberId);
    if (member) {
      const name = this.getLocalizedText(member.name);
      alert(`Interest expressed in ${name}'s profile. The family will be notified.`);
    }
  },

  // Utility methods
  getInitials(name) {
    return name.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2);
  },

  formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString(this.currentLanguage === 'hi' ? 'hi-IN' : 
                                   this.currentLanguage === 'gu' ? 'gu-IN' : 'en-IN', { 
      day: 'numeric', 
      month: 'short', 
      year: 'numeric' 
    });
  },

  calculateAge(dob) {
    const birthDate = new Date(dob);
    const today = new Date();
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }
    
    return age;
  },

  getTimeAgo(timestamp) {
    const now = new Date();
    const diff = now - new Date(timestamp);
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    
    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    if (minutes > 0) return `${minutes}m ago`;
    return 'Just now';
  }
};

// Global function bindings for HTML onclick handlers
window.showLogin = () => {
  SamajApp.showModal('login-modal');
};

window.showRegister = () => {
  SamajApp.showModal('register-modal');
};

window.hideModal = (modalId) => {
  SamajApp.hideModal(modalId);
};

window.sendOTP = (type) => {
  SamajApp.sendOTP(type);
};

window.logout = () => {
  SamajApp.logout();
};

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  SamajApp.init();
  console.log('Dabgar Samaj Community App with Multilingual Support Loaded Successfully!');
});